Здесь описываются приложения, которые есть на ветке mySpring:
1)приложение IoC-01:
В этом приложение показывается как можно с помощью Spring создавать объекты классов, не использую код Java, типо new Person. 
Также показана, как можно организовать связь между объектами разных классов.
Важное замечание: Spring создал для всего приложения один экземпляр объекта классов Person,Car,currentDate.

2)приложение IoC-03:
В этом приложение показывается как Spring, используя разные конструкторы класса Person инициализирует поля класса Person.

3)приложение IoC 04 Scope:
в этом приложении показывается как Spring создает разные экхемпляры класса currentDate.
В отличии от первого примера, в котором создается один конечный вариант(экземпляр) объекта Person,Car,currentDate.
Добавила аргумент scope к единтсвенному бину в currentDate.
Этот аргумент позволяет Spring при обращении к springContext(конкретно к этому бину) создавать каждый раз новый экземпляр объекта класса Date. 
Если scope убрать, то время с датой меняться не будут.

4)приложение IoC 04-01 Scope:
В данном приложение, добавивив scope я все-таки проверяю объекты на равенство, при наличии scope объекты currentDate 
должны быть разные - время меняется.

5)приложение IoC 04-02 Scope:
В данном пример просто в одном месте показаны два вида scope.
У одного дата меняется, у другого нет.

6)приложение IoC-02-Inheritance:
В данном примере показывается следующее:
1)Создан класс-предок(главный) - Person
2)Созданы два класса-наследника:Adult,Child
3)В springContext.xml показано как можно организовать иерархию классов.

7)приложение IoC-05:
В данном примере показывается пример ленивой инциализации,
 тоесть обратились к объекту(тоесть когда объект понадобился), 
 тогда мы и проинициализировали его поля, НЕ РАНЬШЕ!!!!
 
 8) приложение IoC-06:
 Показывает, как можно провести дополнительную инциализацию объекта, например закрыть файл, уничтожить объект.
 Рассматриваются четыре варианта:
 1)через специальные модификаторы внутри бинов, для методов: init-method, destroy-method
 2)через специальные интерфейсы: InitializingBean, DisposableBean
 3)указываютсятся модификаторы и имена методов, которые Spring должен искать в шапке springContext.xml
 4)в springContext.xml и в классах Java указываются анотации,по которым Spring определит какой это метод: init или destroy

9)приложение JDBC-01:
приложение демонстрирует работу Spring с Базой Данных  PostgreSQL:
1)Для примера созданы два класса: City,Region. Один класс зависит от другого. В классе City есть ссылка на класс Region.
2)в springContext.xml прописываются два бина: dataSource(устанавливает координаты соединения с базой данных), jdbcTemplate
3)В классе SpringJDBCTemplateExample(то что не закоменчено) - демонстрирует как нужно прописывать организацию запроса к БД.
Показывется результат работы двух запросов:

16:02:00 DEBUG SpringJDBCTemplateExample - Sidorov count: 2

16:02:01 DEBUG SpringJDBCTemplateExample - Author Name: Smirnov  

10)приложение JDBC-02:
Данное приложение показывает как можно с помощью Spring организовать соединение к БД(инициализировать драйвер,инициализировать соединение, хранить настройки соединения,...)