Здесь описываются приложения, которые есть на ветке mySpring:
1)приложение IoC-01:
В этом приложение показывается как можно с помощью Spring создавать объекты классов, не использую код Java, типо new Person. 
Также показана, как можно организовать связь между объектами разных классов.
Важное замечание: Spring создал для всего приложения один экземпляр объекта классов Person,Car,currentDate.

2)приложение IoC-03:
В этом приложение показывается как Spring, используя разные конструкторы класса Person инициализирует поля класса Person.

3)приложение IoC 04 Scope:
в этом приложении показывается как Spring создает разные экхемпляры класса currentDate.
В отличии от первого примера, в котором создается один конечный вариант(экземпляр) объекта Person,Car,currentDate.
Добавила аргумент scope к единтсвенному бину в currentDate.
Этот аргумент позволяет Spring при обращении к springContext(конкретно к этому бину) создавать каждый раз новый экземпляр объекта класса Date. 
Если scope убрать, то время с датой меняться не будут.

4)приложение IoC 04-01 Scope:
В данном приложение, добавивив scope я все-таки проверяю объекты на равенство, при наличии scope объекты currentDate 
должны быть разные - время меняется.

5)приложение IoC 04-02 Scope:
В данном пример просто в одном месте показаны два вида scope.
У одного дата меняется, у другого нет.

6)приложение IoC-02-Inheritance:
В данном примере показывается следующее:
1)Создан класс-предок(главный) - Person
2)Созданы два класса-наследника:Adult,Child
3)В springContext.xml показано как можно организовать иерархию классов.

7)приложение IoC-05:
В данном примере показывается пример ленивой инциализации,
 тоесть обратились к объекту(тоесть когда объект понадобился), 
 тогда мы и проинициализировали его поля, НЕ РАНЬШЕ!!!!
 
 8) приложение IoC-06:
 Показывает, как можно провести дополнительную инциализацию объекта, например закрыть файл, уничтожить объект.
 Рассматриваются четыре варианта:
 1)через специальные модификаторы внутри бинов, для методов: init-method, destroy-method
 2)через специальные интерфейсы: InitializingBean, DisposableBean
 3)указываютсятся модификаторы и имена методов, которые Spring должен искать в шапке springContext.xml
 4)в springContext.xml и в классах Java указываются анотации,по которым Spring определит какой это метод: init или destroy

9)приложение JDBC-01:
приложение демонстрирует работу Spring с Базой Данных  PostgreSQL:
1)Для примера созданы два класса: City,Region. Один класс зависит от другого. В классе City есть ссылка на класс Region.
2)в springContext.xml прописываются два бина: dataSource(устанавливает координаты соединения с базой данных), jdbcTemplate
3)В классе SpringJDBCTemplateExample(то что не закоменчено) - демонстрирует как нужно прописывать организацию запроса к БД.
Показывется результат работы двух запросов:

16:02:00 DEBUG SpringJDBCTemplateExample - Sidorov count: 2

16:02:01 DEBUG SpringJDBCTemplateExample - Author Name: Smirnov  

Смотреть метод: private static void queryForSimpleObject(JdbcTemplate jdbc)

10)приложение JDBC-02:
Данное приложение показывает как можно с помощью Spring организовать соединение 
к БД(инициализировать драйвер,инициализировать соединение, хранить настройки соединения,...)

11)приложение JDBC-03:
В приложении показывается как вернуть(показать на экране) результат запроса к БД,
 когда у нас уже больше одного поля(например, возвращается вся строка с набором полей)
 Смотреть метод: private static void queryForComplexObject(JdbcTemplate jdbc)
 
12)приложение JDBC-04:
В приложении показывается как вставить в таблицу БД новую строку. Показано два варианта:
1-ый вариант(закоменчен): В нем показывается вставка новой строки, при условиии, что в таблице есть auto_increment(поле,которое генериться автоматически)
2-ой вариант: В нем просто в таблицу вставляется новая строка, состоящая из двух полей таблицы(id(тип: INTEGER),nameauthors(тип: VARHAR))
ВАЖНО!!!! В данном примере нужные для работы приложения библиотеки, засунуты физически в проект - из-за этого, размер проекта вырос
Смотреть метод: private static void insertNewAuthors(JdbcTemplate jdbc)

12)приложение JDBC-04-02:
Приложение аналогично JDBC-04, но нужные для работы приложения библиотеки подтягиваются в проект через Maven, тоесть указаны в файле конфигурации Maven - pom.xml
Смотреть метод: private static void insertNewAuthors(JdbcTemplate jdbc)

13)приложение Simple_Bean-02:
В приложении показывается как можно связывать бины, не используя ref - Используя аннотации Spring

14)приложение Simple_Bean-03:
В приложении показывается как можно сказать Спрингу, какой бин создавать,
 если в springContext.xml содержит несколько бинов одного типа(тоесть несколько объектов одного класса) - опять же пример с аннотацииями.
 
15)приложение Simple_Bean-04:
пример создания одного бина.
Важно обратить внимание:
1.Какие библиотеки подключаются в pom.xml
2.Как организуется связь между: 
	SimpleBeanExample:
		Car4 car4 = context.getBean("car4",Car4.class);
		
	springExample.xml:
		<bean id="car4" class="edu.javacourse.spring.ioc.beans.Car4">
        <property name="id" value="1"/>
        <property name="model" value="Subaru"/>
        <property name="year" value="2020"/>
        <property name="lastService" ref="currentDate"/>
    </bean>
	
16)приложение Simple_Bean-07: (смотри урок 6 часть 1 мин 42)
В приложении показано как можно организовать тест конструктора без параметров класса Car7 разными способами создавая бин

 1-ыйвариант: бин создается на основе анотации:
 Говорим,что первым работает Spring
 @RunWith(SpringJUnit4ClassRunner.class)
 Настройки для Spring берутся из файла: 
@ContextConfiguration(locations = {"classpath:springExample.xml"})
Затем создается бин, используя анотацию Spring @Autowired
Дальше первый тест - проверяем пустая ссылка или нет

2-ой вариант:
Используя аннотацию @Autowired используем настройки Spring из файла springExample.xml и создаем контекст Spring
Затем в тесте создаем бин(объект класса Car) и с помощью этого объекта проверям вызывается ли метод 

Важно обратить внимание:
1.Какие библиотеки подключаются в pom.xml для использования Spring для тестирования
2.Какие используются анотации в CarTest
3)В Car7Test бин создается два раза, если бы в бине car7 не было scope="prototype",
 то бин использовался один и то же, просто доставалс бы из кеша.
 Я указываю на это потому что создаю бин два раза(1-ый раз:car7_2, 2-ой раз: car7_3)

16)приложение Simple_Bean-06: -не работает
В приложении показываются сразу два варианта работы с настройками Spring, тоесть созданием объектов(бинов)
 и запуск с помощью этих бинов методов классов, для проверки работоспосбности тестов.
 


17)приложение Simple_Bean-05:
Важно обратить внимание:
В приложении показан один из способов создания бина и пример использования Spring для тестирования
Подробнее:
1)Есть у нас файл конфигурации Spring - springExample.xml
Мы указываем с помощью анотации @ContextConfiguration, где лежит файл с настройками для Spring
2)Далее анотация @Autowired позволяет нам связать создание объекта класса Car5 с именем car5 с аналогичным id=car5 в файле springExample.xml
3)Далее, в тесте, мы проверяем получилось ли связывание, тоесть появился ли объект с именем car5 и заполненными полями


